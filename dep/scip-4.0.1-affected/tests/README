SCIP Unit Tests
===============

Write and run unit tests for SCIP.

-  `Overview <#overview>`__
-  `Write <#write>`__
-  `Examples <#examples>`__
-  `Compile <#compile>`__
-  `Run <#run>`__
-  `Debug <#debug>`__

Overview
--------

A unit test is an automated piece of code that invokes a unit of work in
the system and then checks a single assumption about the behavior of
that unit of work. The SCIP Unit Test Suite leverages
`Criterion <http://criterion.readthedocs.io/en/master/>`__ as the
testing framework and
`ctest <https://cmake.org/cmake/help/v2.8.8/ctest.html>`__ as the
runner. The SCIP Unit Test Suite is very much in a state of development.
Check out the `unit test suite
milestone <https://git.zib.de/integer/scip/milestones/2>`__ for more
information.

Write
-----

Tests are organized into topic-specific directories in ``src``. When
writing new tests, find the directory that best suites your test, or
create one if it doesn't already exist. For example, if a test is meant
to illustrate a bug, place is in ``src/bugs/``. Use
``#include "include/scip_test.h"`` to access Criterion and the
``SCIP_CALL`` macro. Ensure that this is the **last** included header.

Criterion comes with
`fixtures <http://criterion.readthedocs.io/en/master/starter.html?highlight=fixture#fixtures>`__
and `asserts <http://criterion.readthedocs.io/en/master/assert.html>`__
built-in, and also supports `parameterized
tests <http://criterion.readthedocs.io/en/master/parameterized.html>`__.

Examples
~~~~~~~~

Here are some test examples that can help you get started writing unit
tests.

+----------------------+-----------------------------------------------------------------+
| Example Type         | Location                                                        |
+======================+=================================================================+
| catch a signal       | ``src/bugs/depthlevel.c``                                       |
+----------------------+-----------------------------------------------------------------+
| parameterized test   | unittest\_framework\_tmp branch, ``src/cons/expr/simplify.c``   |
+----------------------+-----------------------------------------------------------------+
| check stdout         | unittest\_framework\_tmp branch, ``src/cons/expr/walk.c``       |
+----------------------+-----------------------------------------------------------------+

Compile
-------

Smart test discovery is already built into the ``Makefile``, so anything
in ``src`` (at any level of nesting) will be detected and compiled into
the equivalent path in the ``bin`` directory. Also, Criterion
automagically generates the test makefile for ``ctest``. There should
never be a reason to directly modify any Makefile unless you are hacking
on the SCIP Unit Test Suite.

The easiest way to compile and run the tests is:

::

    make OPT=<opt|dbg> ZIMPL=<true|false> IPOPT=true all

This command will check for
`Criterion <http://criterion.readthedocs.io/en/master/>`__, download and
install it if not found, and compile and run all tests in ``src/``.
If you already have installed Criterion on you system, execute
``touch Criterion`` or ``mkdir Criterion`` before calling make.

PROTIP: pass the same flags that were used to compile SCIP to
``make all``.

Run
---

See above for the easiest way to compile and run tests. For simply
running tests:

::

    make OPT=<opt|dbg> ZIMPL=<true|false> IPOPT=true test

This creates ``CTestTestfile.cmake`` with a list of the test to run and
then calls ``ctest --output-on-failure``. By default, tests in
``src/bugs/`` are not compiled or run since they take a long time. To
compile and run them:

::

    make OPT=<opt|dbg> ZIMPL=<true|false> IPOPT=true test BUGS=true

TODO: Define a policy for moving/removing tests in ``src/bugs`` once the
bugs are fixed.

Debug
-----

If a test fails, use ``gdb`` to debug. For example:

::

     >> ./bin/cons/quadratic/gauge.linux.x86_64.gnu.dbg.spx2
             [----] src/cons/quadratic/gauge.c:112: Assertion failed: gauge unavailable, pointless to continue
             [FAIL] separation::gauge: (0.00s)
             [====] Synthesis: Tested: 1 | Passing: 0 | Failing: 1 | Crashing: 0

The test suite is ``separation`` and the test name is ``gauge``. To
debug:

::

    >> gdb --args bin/cons/quadratic/gauge.linux.x86_64.gnu.dbg.spx2 --single separation::gauge
    (gdb) br src/cons/quadratic/gauge.c:112

Criterion by default prints all of the critical debugging information
(test\_suite::test\_name, file and line number were to break). When a
test crashes, there is no need to ``break`` in ``gdb``. TODO: simplify
debugging.
